#include "convert_integer.h"



int calculate_ordinal_day(int day, int month , int year);

int is_leap_year(int year);

int get_day_of_week_first_jan(int year);

int calculate_ISO_week(int ordinal_daya, int week_day, int year);

int weeks_in_year(int year);

void get_ordinal_date(int day, int month , int year);

void get_week_date(int day,int month, int year);

void get_calendar_date(int day, int month, int year);





int p(int year);



int main(int argc, char ** argv){



   int day,month,year;



    day = get_integer();

    month = get_integer();

    year = get_integer();



    get_calendar_date(day,month,year);

    get_ordinal_date(day,month,year);

    get_week_date(day,month,year);

    return 0;

}





long my_floor(double  number){



    if(number < 0 )

        return (long)number - 1;    

    else

        return (long) number;      

}





int is_leap_year(int year){



    return (((year % 4 == 0) && (year % 100!= 0)) || (year % 400 == 0));

}



int calculate_ordinal_day(int day, int month , int year){

   

       long ordinal_day = my_floor(30.6 *month - 91.4) + day;

   

    if(month == 1)

        return day;

    if(month == 2)

        return day + 31;







    if (is_leap_year(year))

        return ordinal_day + 60;



    return ordinal_day + 59;



}



void get_ordinal_date(int day, int month , int year){

    printf("%i-%03d\n",year, calculate_ordinal_day(day,month,year));

}



int get_day_of_week_first_jan(int year){

    return   (1 + 5 * ((year-1) % 4) + 4 * ((year-1) % 100) + 6 * ((year-1) % 400)) % 7;

}



int calculate_ISO_week(int ordinal_day, int week_day, int year){

    int week = my_floor((ordinal_day - week_day + 10) /7);



    if (week == 0)

        week = weeks_in_year(year - 1);



    if (week > weeks_in_year(year)) {

        if (week_day < 4)

            week = 1;

    }



    return week;

}



int p(int year){

    return (year + (year / 4) - (year / 100) + (year / 400) ) % 7;

}



int weeks_in_year(int year){

    if (p(year) == 4 || p(year-1) == 3)

        return 53;

    else

        return 52;

}



void get_week_date(int day,int month, int year){

    int ordinal_day = calculate_ordinal_day(day,month,year);

    int week_day = get_day_of_week_first_jan(year);

    printf("%i-W%i-%i\n",year, calculate_ISO_week(ordinal_day,week_day,year),get_day_of_week_first_jan(year));

}



void get_calendar_date(int day, int month, int year){

    printf("%i-%02d-%02d\n",year,month,day);

}